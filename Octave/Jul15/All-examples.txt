%%% 1.1 Example of a Function in Matlab %%%

function R = dwt(Signal)

N = length(Signal);       % Finds the length of the signal.

s = zeros(1,N/2);         % Predefines a vector of zeroes,
d = s;                    % and a copy of it.

% Here the signal is processed
% as in the following examples. See below.
% The result is placed in s and d.

R = [s d];                % Concatenates s and d.




%%% 2.1 The Haar Transform %%%

function [s,d] = dwthaar(Signal)

% Determine the length of the signal.
N = length(Signal);

% Allocate space in memory.
s = zeros(1, N/2);
d = s;

% The actual transform.
for n=1:N/2
  s(n) = 1/2*(Signal(2*n-1) + Signal(2*n));
  d(n) = Signal(2*n-1) - s(n);
end




%%% 2.2 Wavelet Decomposition Using the Haar Transform %%%

function T = w_decomp(Signal)

N = size(Signal,2);
J = log2(N);

if rem(J,1)
  error('Signal must be of length 2^N.');
end

T = zeros(J, N);
T(1,:) = Signal;

for j=1:J
  Length = 2^(J+1-j);
  T(j+1, 1:Length) = dwthaar( T(j, 1:Length) );
  T(j+1, Length+1:N) = T(j, Length+1:N);
end




%%% 3.1 Matlab Optimized Daubechies 4 Transform %%%

s1 = S(1:2:N-1) + sqrt(3)*S(2:2:N);
d1 = S(2:2:N) - sqrt(3)/4*s1 - (sqrt(3)-2)/4*[s1(N/2) s1(1:N/2-1)];
s2 = s1 - [d1(2:N/2) d1(1)];
s = (sqrt(3)-1)/sqrt(2) * s2;
d = (sqrt(3)+1)/sqrt(2) * d1;




// 3.2 Daubechies 4 Transform in C //

for (n = 0; n < N/2; n++) s[n] = S[2*n] + sqrt(3) * S[2*n+1];

d[0] = S[1] - sqrt(3)/4 * s[0] - (sqrt(3)-2)/4 * s[N/2-1];
for (n = 1; n < N/2; n++)
  d[n] = S[2*n+1] - sqrt(3)/4 * s[n] - (sqrt(3)-2)/4 * s[n-1];

for (n = 0; n < N/2-1; n++) s[n] = s[n] - d[n+1];
s[N/2-1] = s[N/2-1] - d[0];

for (n = 0; n < N/2; n++) s[n] = (sqrt(3)-1) / sqrt(2) * s[n];

for (n = 0; n < N/2; n++) d[n] = (sqrt(3)+1) / sqrt(2) * d[n];




%%% 3.3 Cyclic Permutation of a Vector %%%
function P = cpv(S, k)

if k > 0
  P = [S(k+1:end) S(1:k)];
elseif k < 0
  P = [S(end+k+1:end) S(1:end+k)];
end




%%% 3.4 Matlab Optimized CDF(4,6) Transform %%%

s = S(1:2:N-1) - 1/4*( cpv(S(2:2:N),-1) + S(2:2:N) );
d = S(2:2:N) - s - cpv(s,1);
s = s - 1/4096*( -35*cpv(d,-3) +265*cpv(d,-2) -998*cpv(d,-1) -998*d +265*cpv(d,1) -35*cpv(d,2) );
s = 4/sqrt(2) * s;
d = sqrt(2)/4 * d;




// 3.5 CDF(4,6) Transform in C //

N = N/2;

s[0] = S[0] - (S[2*N-1] + S[1])/4;
for (n = 1; n < N; n++) s[n] = S[2*n] - (S[2*n-1] + S[2*n+1])/4;

for (n = 0; n < N-1; n++) d[n] = S[2*n+1] - (s[n] + s[n+1]);
d[N-1] = S[2*N-1] - (s[N-1] + s[0]);

s[0] += (35*d[N-3]-265*d[N-2]+998*d[N-1]+998*d[0]-265*d[1]+35*d[2])/4096;
s[1] += (35*d[N-2]-265*d[N-1]+998*d[0]+998*d[1]-265*d[2]+35*d[3])/4096;
s[2] += (35*d[N-1]-265*d[0]+998*d[1]+998*d[2]-265*d[3]+35*d[4])/4096;

for (n = 3; n < N-2; n++)
  s[n] += (35*d[n-3]-265*d[n-2]+998*d[n-1]+998*d[n]-265*d[n+1]+35*d[n+2])/4096;
s[N-2] += (35*d[N-5]-265*d[N-4]+998*d[N-3]+998*d[N-2]-265*d[N-1]+35*d[0])/4096;
s[N-1] += (35*d[N-4]-265*d[N-3]+998*d[N-2]+998*d[N-1]-265*d[0]+35*d[1])/4096;

K = 4/sqrt(2);
for (n = 0; n < N; n++) {
  s[n] *= K;
  d[n] /= K;
}




%%% 3.6 Inverse Daubechies 4 Transform %%%

d1 = d / ((sqrt(3)+1)/sqrt(2));
s2 = s / ((sqrt(3)-1)/sqrt(2));
s1 = s2 + cpv(d1,1);
S(2:2:N) = d1 + sqrt(3)/4*s1 + (sqrt(3)-2)/4*cpv(s1,-1);
S(1:2:N-1) = s1 - sqrt(3)*S(2:2:N);




%%% 4.1 The Raw Daubechies 4 Equations %%%

K = (sqrt(3)-1)/sqrt(2);
for n=1:N/2
  s1(n) = S(2*n-1) + sqrt(3)*S(2*n);
  d1(n) = S(2*n) - sqrt(3)/4*s1(n) - (sqrt(3)-2)/4*__s1(n-1)__;
  s2(n) = s1(n) - __d1(n+1)__;
  s(n) = s2(n) * K;
  d(n) = d1(n) / K;
end




%%% 4.2 The Real Time Daubechies 4 Transform %%%

s1(1) = S(1) + sqrt(3)*S(2);
s1(N/2) = S(N-1) + sqrt(3)*S(N);
d1(1) = S(2) - sqrt(3)/4*s1(1) - (sqrt(3)-2)/4*s1(N/2);

for n=1:N/2-1
  s1(n+1) = S(2*(n+1)-1) + sqrt(3)*S(2*(n+1));
  d1(n+1) = S(2*(n+1)) - sqrt(3)/4*s1(n+1) - (sqrt(3)-2)/4*s1(n);
  s2(n) = s1(n) - d1(n+1);
  s(n) = s2(n) * K;
  d(n) = d1(n) / K;
end

s2(N/2) = s1(N/2) - d1(1);
s(N/2) = s2(N/2) * K;
d(N/2) = d1(N/2) / K;




%%% 4.3 The Real Time Daubechies 4 Shifted Transform %%%

s1(1) = S(3) + sqrt(3)*S(4);
s1(N/2) = S(1) + sqrt(3)*S(2);
d1(1) = S(4) - sqrt(3)/4*s1(1) - (sqrt(3)-2)/4*s1(N/2);

for n=1:N/2-2
  s1(n+1) = S(2*(n+1)-1+2) + sqrt(3)*S(2*(n+1)+2);
  d1(n+1) = S(2*(n+1)+2) - sqrt(3)/4*s1(n+1) - (sqrt(3)-2)/4*s1(n);
  s2(n) = s1(n) - d1(n+1);
  s(n) = s2(n) * K;
  d(n) = d1(n) / K;
end

d1(N/2) = S(2) - sqrt(3)/4*s1(N/2) - (sqrt(3)-2)/4*s1(N/2-1);
s2(N/2-1) = s1(N/2-1) - d1(N/2);
s(N/2-1) = s2(N/2-1) * K;
d(N/2-1) = d1(N/2-1) / K;

s2(N/2) = s1(N/2) - d1(1);
s(N/2) = s2(N/2) * K;
d(N/2) = d1(N/2) / K;




%%% 4.4 The Memory Optimized Real Time Daubechies 4 Transform %%%

s(1) = S(3) + sqrt(3)*S(4);
d(1) = S(4) - sqrt(3)/4*s(1) - (sqrt(3)-2)/4* (S(1) + sqrt(3)*S(2));

for n=1:N/2-2
  s(n+1) = S(2*(n+1)-1+2) + sqrt(3)*S(2*(n+1)+2);
  d(n+1) = S(2*(n+1)+2) - sqrt(3)/4*s(n+1) - (sqrt(3)-2)/4*s(n);
  s(n) = s(n) - d(n+1);
  s(n) = s(n) * K;
  d(n) = d(n) / K;
end

s(N/2) = S(1) + sqrt(3)*S(2);
d(N/2) = S(2) - sqrt(3)/4*s(N/2) - (sqrt(3)-2)/4*s(N/2-1);
s(N/2-1) = s(N/2-1) - d(N/2);
s(N/2-1) = s(N/2-1) * K;
d(N/2-1) = d(N/2-1) / K;

s(N/2) = s(N/2) - d(1);
s(N/2) = s(N/2) * K;
d(N/2) = d(N/2) / K;




%%% 4.5 The Optimized Real Time Inverse Daubechies 4 Transform %%%

d(N/2) = d(N/2) * K;
s(N/2) = s(N/2) / K;
s(N/2) = s(N/2) + d(1);

d(N/2-1) = d(N/2-1) * K;
s(N/2-1) = s(N/2-1) / K;
s(N/2-1) = s(N/2-1) + d(N/2);
S(2) = d(N/2) + sqrt(3)/4*s(N/2) + (sqrt(3)-2)/4*s(N/2-1);
S(1) = s(N/2) - sqrt(3)*S(2);

for n=N/2-2:-1:1
  d(n) = d(n) * K;
  s(n) = s(n) / K;
  s(n) = s(n) + d(n+1);
  S(2*(n+1)+2) = d(n+1) + sqrt(3)/4*s(n+1) + (sqrt(3)-2)/4*s(n);
  S(2*(n+1)-1+2) = s(n+1) - sqrt(3)*S(2*(n+1)+2);
end

S(4) = d(1) + sqrt(3)/4*s(1) + (sqrt(3)-2)/4* (S(1) + sqrt(3)*S(2));
S(3) = s(1) - sqrt(3)*S(4);




%%% 4.6 The Raw CDF(4,6) Equations %%%

for n = 1:N/2
  s1(n) = S(2*n-1) - 1/4*(S(2*n-2) + S(2*n));
  d1(n) = S(2*n) - s1(n) - s1(n+1);
  s2(n) = s1(n) - 1/4096*( -35*d1(n-3) +265*d1(n-2) -998*d1(n-1) -998*d1(n) +265*d1(n+1) -35*d1(n+2) );
  s(n) = s2(n) * K;
  d(n) = d1(n) / K;
end




%%% 4.7 The Modified CDF(4,6) Equations %%%

for n = 4:N/2-3
  s1(n+3) = S(2*(n+3)-1) - 1/4*(S(2*(n+3)-2) + S(2*(n+3)));
  __d1(n+2)__ = S(2*(n+2)) - s1(n+2) - s1(n+3);
  s2(n) = s1(n) - 1/4096*( -35*d1(n-3) +265*d1(n-2) -998*__d1(n-1)__ -998*d1(n) +265*d1(n+1) -35*d1(n+2) );
  s(n) = s2(n) * K;
  __d(n)__ = d1(n) / K;
end




%%% 4.8 The Modified CDF(4,6) Transform %%%

s(1) = S(1) - S(2);                                        % CDF(1,1)

s(2) = S(2*2-1) - 1/4*(S(2*2-2) + S(2*2));                 % CDF(4,x)
d(1) = S(2*2-2) - s(1) - s(1+1);                           % CDF(4,x)

s(3) = S(2*3-1) - 1/4*(S(2*3-2) + S(2*3));                 % CDF(4,x)
d(2) = S(2*3-2) - s(2) - s(2+1);                           % CDF(4,x)

s(1+3) = S(2*(1+3)-1) - 1/4*( S(2*(1+3)-2) + S(2*(1+3)) ); % CDF(4,x)
d(1+2) = S(2*(1+2)) - s(1+2) - s(1+3);                     % CDF(4,x)
s(1) = s(1) + 1/2*d(1);                                    % CDF(1,1)

s(2+3) = S(2*(2+3)-1) - 1/4*( S(2*(2+3)-2) + S(2*(2+3)) ); % CDF(4,x)
d(2+2) = S(2*(2+2)) - s(2+2) - s(2+3);                     % CDF(4,x)
s(2) = s(2) - 1/16*( -3*d(1) -3*d(2) );                    % CDF(4,2)

s(3+3) = S(2*(3+3)-1) - 1/4*( S(2*(3+3)-2) + S(2*(3+3)) ); % CDF(4,x)
d(3+2) = S(2*(3+2)) - s(3+2) - s(3+3);                     % CDF(4,x)
s(3) = s(3) - 1/128*( 5*d(1) -29*d(2) -29*d(3) +5*d(4) );  % CDF(4,4)

for n = 4:N/2-3
  s(n+3) = S(2*(n+3)-1) - 1/4*( S(2*(n+3)-2) + S(2*(n+3)) );
  d(n+2) = S(2*(n+2)) - s(n+2) - s(n+3);
  s(n) = s(n) - 1/4096*( -35*d(n-3) +265*d(n-2) -998*d(n-1) -998*d(n) +265*d(n+1) -35*d(n+2) ); % CDF(4,6)
  s(n-3) = s(n-3) * K;
  d(n-3) = d(n-3) / K;
end




%%% 4.9 The Real Time CDF(4,6) Transform %%%

s(1) = S(1) - S(2);                                        % CDF(1,1)
for n = 1:5
  s(n+1) = S(2*(n+1)-1) - 1/4*(S(2*(n+1)-2) + S(2*(n+1))); % CDF(4,x)
  d(n) = S(2*n) - s(n) - s(n+1);                           % CDF(4,x)
end

s(1) = s(1) + 1/2*d(1);                                    % CDF(1,1)
s(2) = s(2) - 1/16*( -3*d(1) -3*d(2) );                    % CDF(4,2)
s(3) = s(3) - 1/128*( 5*d(1) -29*d(2) -29*d(3) +5*d(4) );  % CDF(4,4)

for n = 4:N/2-3
  s(n+3) = S(2*(n+3)-1) - 1/4*( S(2*(n+3)-2) + S(2*(n+3)) );
  d(n+2) = S(2*(n+2)) - s(n+2) - s(n+3);
  s(n) = s(n) - 1/4096*( -35*d(n-3) +265*d(n-2) -998*d(n-1) -998*d(n) +265*d(n+1) -35*d(n+2) );
  s(n-3) = s(n-3) * K;
  d(n-3) = d(n-3) / K;
end

d(N/2) = S(N) - s(N/2);                                    % CDF(1,1)

s(N/2-2) = s(N/2-2) - 1/4096*( -35*d(N/2-5) +265*d(N/2-4) -998*d(N/2-3) -998*d(N/2-2) +265*d(N/2-1) -35*d(N/2) ); % CDF(4,6)
s(N/2-1) = s(N/2-1) - 1/128*( 5*d(N/2-3) -29*d(N/2-2) -29*d(N/2-1) +5*d(N/2) );     % CDF(4,4)
s(N/2) = s(N/2) - 1/16*( -3*d(N/2-1) -3*d(N/2) );          % CDF(4,2)

for k=5:-1:0
  s(N/2-k) = s(N/2-k) * K;
  d(N/2-k) = d(N/2-k) / K;
end




// 4.10 The Real Time CDF(4,6) Transform in C //

s[0] = S[0] - S[1];
for (n = 0; n < 5; n++) {
  s[n+1] = S[2*(n+1)] - (S[2*(n+1)-1] + S[2*(n+1)+1])/4;
  d[n] = S[2*n+1] - s[n] - s[n+1];
}

s[0] += d[0]/2;
s[1] -= (-3*d[0]-3*d[1])/16;
s[2] -= (5*d[0]-29*d[1]-29*d[2]+5*d[3])/128;

for (n = 3; n < N/2-3; n++) {
  s[n+3] = S[2*(n+3)] - (S[2*(n+3)-1] + S[2*(n+3)+1])/4;
  d[n+2] = S[2*(n+2)+1] - s[n+2] - s[n+3];
  s[n] += (35*d[n-3]-265*d[n-2]+998*d[n-1]+998*d[n]-265*d[n+1]+35*d[n+2])/4096;
  s[n-3] = s[n-3] * K;
  d[n-3] = d[n-3] / K;
}

N = N/2;
d[N-1] = S[2*N-1] - s[N-1];

s[N-3] += (35*d[N-6]-265*d[N-5]+998*d[N-4]+998*d[N-3]-265*d[N-2]+35*d[N-1])/4096;
s[N-2] -= ( 5*d[N-4] -29*d[N-3] -29*d[N-2]  +5*d[N-1])/128;
s[N-1] -= (-3*d[N-2]  -3*d[N-1])/16;

for (n = 6; n > 0; n--) {
  s[N-n] *= K;
  d[N-n] /= K;
}




%%% 4.11 The Real Time Inverse CDF(4,6) Transform %%%

for k=0:5
  d(N/2-k) = d(N/2-k) * K;
  s(N/2-k) = s(N/2-k) / K;
end

s(N/2) = s(N/2) + 1/16*( -3*d(N/2-1) -3*d(N/2) );
s(N/2-1) = s(N/2-1) + 1/128*( 5*d(N/2-3) -29*d(N/2-2) ...
           -29*d(N/2-1) +5*d(N/2) );
s(N/2-2) = s(N/2-2) + 1/4096*( -35*d(N/2-5) +265*d(N/2-4) ...
           -998*d(N/2-3) -998*d(N/2-2) +265*d(N/2-1) -35*d(N/2) );
S(N) = d(N/2) + s(N/2);

for n = N/2-3:-1:4
  d(n-3) = d(n-3) * K;
  s(n-3) = s(n-3) / K;
  s(n) = s(n) + 1/4096*( -35*d(n-3) +265*d(n-2) -998*d(n-1) ...
         -998*d(n) +265*d(n+1) -35*d(n+2) );
  S(2*(n+2)) = d(n+2) + s(n+2) + s(n+3);
  S(2*(n+3)-1) = s(n+3) + 1/4*(S(2*(n+3)-2) + S(2*(n+3)));
end

s(3) = s(3) + 1/128*( 5*d(1) -29*d(2) -29*d(3) +5*d(4));
s(2) = s(2) + 1/16*( -3*d(1) -3*d(2));
s(1) = s(1) - 1/2*d(1);

for n = 5:-1:1
  S(2*n) = d(n) + s(n) + s(n+1);
  S(2*(n+1)-1) = s(n+1) + 1/4*(S(2*(n+1)-2) + S(2*(n+1)));
end
S(1) = s(1) + S(2);




%%% 4.12 The Optimized Real Time CDF(4,6) Transform %%%

N = length(S)/2;
cdf2 = 1/16 * [-3 -3];
cdf4 = 1/128 * [5 -29 -29 5];
cdf6 = 1/4096 * [-35 265 -998 -998 265 -35];

s(1) = S(1) - S(2);                              % CDF(1,1)
s(2:6) = S(3:2:11) - (S(2:2:10) + S(4:2:12))/4;  % CDF(4,x)
d(1:5) = S(2:2:10) - s(1:5) - s(2:6);            % CDF(4,x)

s(1) = s(1) + d(1)/2;                            % CDF(1,1)
s(2) = s(2) - cdf2 * d(1:2)';                    % CDF(4,2)
s(3) = s(3) - cdf4 * d(1:4)';                    % CDF(4,4)

for n = 4:N-3
  s(n+3) = S(2*n+5) - (S(2*n+4) + S(2*n+6))/4;
  d(n+2) = S(2*n+4) - s(n+2) - s(n+3);
  s(n) = s(n) - cdf6 * d(n-3:n+2)';
  s(n-3) = s(n-3) * K;
  d(n-3) = d(n-3) / K;
end

d(N) = S(2*N) - s(N);                            % CDF(1,1)

s(N-2) = s(N-2) - cdf6 * d(N-5:N)';              % CDF(4,6)
s(N-1) = s(N-1) - cdf4 * d(N-3:N)';              % CDF(4,4)
s(N) = s(N) - cdf2 * d(N-1:N)';                  % CDF(4,2)

s(N-5:N) = s(N-5:N) * K;
d(N-5:N) = d(N-5:N) / K;




%%% 5.1 Filter implementation of DWT (Uvi_Wave) %%%

function R = fil_cv(S,h,g,k)

% Copyright (C) 1994, 1995, 1996, by Universidad de Vigo

llp = length(h);            % Length of the low pass filter
lhp = length(g);            % Length of the high pass filter.

L = max([lhp,llp]);         % Number of samples for the wraparound.

% Start the algorithm
R = [];                     % The output signal is reset.

for i = 1:k                 % For every scale (iteration)...
  lx = length(S);

  if rem(lx,2) ~= 0         % Check that the number of samples
    S = [S,0];              % will be even (because of decimation).
    lx = lx + 1;
  end

  Sp = S;                   % Build wraparound. The input signal
  pl = length(Sp);          % can be smaller than L, so it may
  while L > pl              % be necessary to repeat it several
    Sp = [Sp,S];            % times.
    pl = length(Sp);
  end

  S = [Sp(pl-L+1:pl),S,Sp(1:L)];  % Add the wraparound.

  s = conv(S,h);            % Then do low pass filtering
  d = conv(S,g);            % and high pass filtering.

  s = s((1+L):2:(L+lx));    % Decimate the outputs
  d = d((1+L):2:(L+lx));    % and leave out wraparound

  R = [d,R];                % Put the resulting wavelet step
                            % on its place in the wavelet vector,
  S = s;                    % and set the next iteration.
end

R = [S,R];                  % Wavelet vector (1 row vector)




// 5.2 Filter implementation with boundary correction - in C //

double *SigPtr, *SigPtr1, *SigPtr2, *Hptr, *Gptr, *BM;
int GCP, EndSig, m, n;

if (fmod(HLen,4)) GCP = 0; else GCP = 1;

SigPtr1 = &RetSig[GCP*N/2];
SigPtr2 = &RetSig[(1-GCP)*N/2];

/* LEFT EDGE CORRECTION (REALLY A MUL OF MATRIX AND VECTOR). */
BM = LBM;
for (n = 0; n < EMN-1; n += 2)
{
  SigPtr = Signal;
  *SigPtr1 = *BM++ * *SigPtr++;
  for (m = 1; m < EMM-1; m++) *SigPtr1 += *BM++ * *SigPtr++;
  *SigPtr1++ += *BM++ * *SigPtr++;

  SigPtr = Signal;
  *SigPtr2 = *BM++ * *SigPtr++;
  for (m = 1; m < EMM-1; m++) *SigPtr2 += *BM++ * *SigPtr++;
  *SigPtr2++ += *BM++ * *SigPtr++;
}

if (!fmod(HLen,4))
{
  SigPtr = Signal;
  *SigPtr1 = *BM++ * *SigPtr++;
  for (m = 1; m < EMM-1; m++) *SigPtr1 += *BM++ * *SigPtr++;
  *SigPtr1++ += *BM++ * *SigPtr++;

  SigPtr = SigPtr1;
  SigPtr1 = SigPtr2;
  SigPtr2 = SigPtr;
}

/* THE ORDINARY WAVELET TRANSFORM (ON THE MIDDLE OF THE SIGNAL). */
for (n = 0; n < N/2-EMN; n++)
{
  SigPtr = &Signal[2*n];
  Hptr = HA;
  Gptr = GA;

  *SigPtr1 = *Hptr++ * *SigPtr;
  *SigPtr2 = *Gptr++ * *SigPtr++;
  for (m = 1; m < HLen-1; m++)
  {
    *SigPtr1 += *Hptr++ * *SigPtr;
    *SigPtr2 += *Gptr++ * *SigPtr++;
  }
  *SigPtr1++ += *Hptr++ * *SigPtr;
  *SigPtr2++ += *Gptr++ * *SigPtr++;
}

/* RIGHT EDGE CORRECTION (REALLY A MUL OF MATRIX AND VECTOR). */
EndSig = N-EMM;
BM = RBM;
for (n = 0; n < EMN-1; n += 2)
{
  SigPtr = &Signal[EndSig];
  *SigPtr1 = *BM++ * *SigPtr++;
  for (m = 1; m < EMM-1; m++) *SigPtr1 += *BM++ * *SigPtr++;
  *SigPtr1++ += *BM++ * *SigPtr++;

  SigPtr = &Signal[EndSig];
  *SigPtr2 = *BM++ * *SigPtr++;
  for (m = 1; m < EMM-1; m++) *SigPtr2 += *BM++ * *SigPtr++;
  *SigPtr2++ += *BM++ * *SigPtr++;
}

if (!fmod(HLen,4))
{
  SigPtr = &Signal[EndSig];
  *SigPtr1 = *BM++ * *SigPtr++;
  for (m = 1; m < EMM; m++) *SigPtr1 += *BM++ * *SigPtr++;
}


%%% 6.1 Construction of Left and Right Boundary Filters %%%

function [LBM, RBM] = boundary(H);

H = H(:)';                           % Ensures a row vector
L = length(H);
G = fliplr(H).*((-1).^[0:L-1]);      % Construct high pass

% Construct matrices from H and G.
for k = 2:2:L-2
  LBM(k-1,1:k)       = H(L-k+1:L);   % Construct left boundary matrix
  LBM(k  ,1:k)       = G(L-k+1:L);
  RBM(k-1,L-k-1:L-2) = G(1:k);       % Construct right boundary matrix
  RBM(k  ,L-k-1:L-2) = H(1:k);       % which is upside down
end

LBM = LBM(L/2:L-2,:);                % Truncate to last half of rows
RBM = RBM(L/2:L-2,:);

% Do Gram-Schmidt on rows of LBM.
for k = 1:L/2-1
  v = LBM(k,:) - (LBM(1:k-1,:) * LBM(k,:)')' * LBM(1:k-1,:);
  LBM(k,:) = v/norm(v);
end

% Do Gram-Schmidt on rows of RBM.
for k = 1:L/2-1
  v = RBM(k,:) - (RBM(1:k-1,:) * RBM(k,:)')' * RBM(1:k-1,:);
  RBM(k,:) = v/norm(v);
end

RBM = flipud(RBM);                   % Flip right matrix upside down




%%% 6.2 Application of Gram-Schmidt Boundary Filters %%%

function S2 = ApplyBoundary(S)

L = 10;                                % The length of the filter
[h,g] = daub(L);                       % Get Daubechies L filter
[LBM,RBM] = boundary(h);               % Construct GS boundary filters

% Construction of alternative synthesis filters
hr(1:2:L-1) = h(L-1:-2:1);
hr(2:2:L) = g(L-1:-2:1);
gr(1:2:L-1) = h(L:-2:2);
gr(2:2:L) = g(L:-2:2);

N = length(S);

% Initialize transform signals
T = zeros(1,N);
T2 = T;
S2 = T2;

% Direct transform with GS boundary filters
T(1:L/2-1)   = LBM * S(1:L-2)';         % Apply left matrix
T(N-L/2+2:N) = RBM * S(N-L+3:N)';       % Apply right matrix

for k = 1:2:N-L+1
  T(k+L/2-1) = h * S(k:L+k-1)';         % Apply interior filters
  T(k+L/2)   = g * S(k:L+k-1)';
end

T = [T(1:2:N-1) T(2:2:N)];              % Separate low and high pass


% Inverse transform with GS boundary filters
T2(1:2:N-1) = T(1:N/2);                 % Mix low and high pass
T2(2:2:N) = T(N/2+1:N);

for k = 1:2:L-3
  S2(k)   = hr(L-k:L) * T2(L/2:L/2+k)';         % Apply truncated
  S2(k+1) = gr(L-k:L) * T2(L/2:L/2+k)';         %  interior filters
end
S2(1:L-2) = S2(1:L-2) + (LBM' * T2(1:L/2-1)')'; % Apply left matrix

for k = 1+(L/2-1):2:N-L+1-(L/2-1)
  S2(k+L/2-1) = hr * T2(k:L+k-1)';              % Apply whole
  S2(k+L/2)   = gr * T2(k:L+k-1)';              %  interior filters
end

for k = N-L+3:2:N-1
  S2(k)   = hr(1:N-k+1) * T2(k-L/2+1:N-L/2+1)'; % Apply truncated
  S2(k+1) = gr(1:N-k+1) * T2(k-L/2+1:N-L/2+1)'; %  interior filters
end
S2(N-L+3:N) = S2(N-L+3:N) + (RBM' * T2(N-L/2+2:N)')'; % Right matrix




%%% 7.1 Wavelet Packet Decomposition %%%

function D = wpd(S,h,g,J)

N = length(S);

if J > floor(log2(N))
  error('Too many levels.');
elseif rem(N,2^(J-1))
  error(sprintf('Signal length must be a multiple of 2^%i.',J-1));
end

D = zeros(J,N);
D(1,:) = S;

% For each level in the decomposition
% (starting with the second level).
for j = 1:J-1
  width = N/2^(j-1);      % Width of elements on j'th level.

  % For each pair of elements on the j'th level.
  for k = 1:2^(j-1)
    Interval = [1+(k-1)*width:k*width];
    D(j+1,Interval) = dwt(D(j,Interval),h,g);
  end
end




%%% 8.1 Generating a Vector with Cost Values %%%
J = size(D, 1);                         % Levels in the decomp

SignalLength = size(D, 2);              % Length of signal
N = log2(SignalLength);

CostValues = zeros(1, 2^J - 1);          % Initialize cost value vector

% Apply the cost function to each element in the decomposition
for k=1:2^J-1
  j = floor(log2(k)) + 1;               % Find the level
  L = 2^(N-j+1);                        % Find length of element

  % Go through all elements on the j'th level
  for m=1:2^(j-1)
    E = D(j, 1 + (m-1)*L: m*L);         % Extract element
    CostValues(k) = CostFunc(E);        % Calculate cost value
  end
end




%%% 8.2 Best Basis Search %%%

% Mark all the bottom elements.
Basis = [zeros(1, 2^(J-1)-1) ones(1, 2^(J-1))];

% Bottom-up search for the best basis.
for j=J-1:-1:1
  for k=2^(j-1):2^j-1
    v1 = CostValues(k);
    v2 = CostValues(2*k) + CostValues(2*k+1);
    if v1 >= v2
      Basis(k) = 1;
    else
      CostValues(k) = v2;
    end
  end
end

% Fill with 2's below the chosen basis.
for k=1:(length(Basis)-1)/2
  if Basis(k) == 1 | Basis(k) == 2
    Basis(2*k) = 2;
    Basis(2*k+1) = 2;
  end
end

% Convert all the 2's to 0's.
Basis = Basis .* (Basis == 1);



% This file is associated with the book
% "Ripples in Mathematics - The Discrete Wavelet Transform"
% Arne Jensen, Anders la Cour-Harbo, Springer-Verlag 2001.
% ISBN 3-540-41662-5.

% See also http://www.control.auc.dk/~alc/ripples.html
